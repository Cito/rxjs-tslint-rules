import { Observable, of, Subscription, throwError } from "rxjs";
import { catchError, map } from "rxjs/operators";

const userland = <T>(selector: (t: T) => T) => map(selector);

class Something {
    constructor() {
        const ob = of(1).pipe(
            map(this.map),
                ~~~~~~~~                                                    [no-unbound-this]
            userland(this.map),
                     ~~~~~~~~                                               [no-unbound-this]
            catchError(this.catchError)
                       ~~~~~~~~~~~~~~~                                      [no-unbound-this]
        ).subscribe(
            this.next,
            ~~~~~~~~~                                                       [no-unbound-this]
            this.error,
            ~~~~~~~~~~                                                      [no-unbound-this]
            this.complete
            ~~~~~~~~~~~~~                                                   [no-unbound-this]
        );
        const subscription = new Subscription(this.tearDown);
                                              ~~~~~~~~~~~~~                 [no-unbound-this]
        subscription.add(this.tearDown);
                         ~~~~~~~~~~~~~                                      [no-unbound-this]
    }
    catchError(error: any): Observable<never> { return throwError(error); }
    complete(): void {}
    error(error: any): void {}
    map<T>(t: T): T { return t; }
    next<T>(t: T): void {}
    tearDown(): void {}
}

[no-unbound-this]: Unbound this calls are forbidden
